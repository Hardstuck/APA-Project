source("readData.r")
source("readData.r")
data
data$[data$firstBlood == 0]
data$[data$firstBlood == 0,]
data$firstBlood[data$firstBlood == 0,]
data$firstBlood[data$firstBlood == 0]
data[data$firstBlood == 0]
data[data$firstBlood == 0,]
data[data$firtTower == 0,]
data[data$firtTower == 0,
data[data$firtTower == 0,]
data[data$firstTower == 0,]
data[data$firstBlood == 0,]
data[data$firstBlood == 0,]
data[data$firstDragon == 0,]
dim(data[data$firstDragon == 0,])
dim(data[data$firstBaron == 0,])
dim(data[data$firstInibidor == 0,])
dim(data[data$firstTower == 0,])
dim(data[data$firstInhibitor == 0,])
dim(data[data$winner == 0,])
data$[data$firstTower == 0]
data$[data$firstTower == 0,]
dim(data[data$firstTower == 0,])
dim(data[data$firstBlood == 0,])
dim(data[data$firstDragon == 0,])
dim(data[data$firstBaron == 0,])
dim(data[data$firstInhibitor == 0,])
dim(data[data$firstRiftHerald == 0,])
source("readData.r")
data
dim(data[data$firstRiftHerald == 0 || data$t1_towerKills > 0,])
dim(data[data$firstRiftHerald == 0 && data$t1_towerKills > 0,])
dim(data[data$firstTower == -1 && data$t1_towerKills > 0,])
dim(data[data$firstTower == -1 && data$t2_towerKills > 0,])
dim(data[data$firstBaron == -1 && data$t2_baronKills > 0,])
dim(data[data$firstBaron == -1 && data$t1_baronKills > 0,])
dim(data[data$firstDragon == -1 && data$t1_Dragon > 0,])
names(data)
c(9: 19)
data[c(9,19)]
data[c(9,19),]
data[,c(9,19)]
data[,c(9:19)]
data[,c(8:18)]
names(data)
data[,c(8:18)] <- lapply(data[, c(8:18)], function(x), c(scale(x))
data[,c(8:18)] <- lapply(data[, c(8:18)], function(x), c(scale(x))
data[,c(8:18)] <- lapply(data[, c(8:18)], function(x), c(normalize(x,method = 'standardize' )))
data[,c(8:18)] <- lapply(data[, c(8:18)], function(x), c(normalize(x,method = 'standardize')))
data[,c(8:18)] <- lapply(data[, c(8:18)], function(x), c(normalize(x,method = 'standardize')))
data[, c(8:18)]
lapply(data[, 18])
lapply(data[, 18], function(x), normalize(x, method = 'standardize')
lapply(data[, 18], function(x), normalize(x, method = 'standardize'))
lapply(data[, 18],normalize(x, method = 'standardize'))
lapply(data[, 18],normalize(x, method = 'standardize')
)
library(dplyr)
lapply(data[, 18],normalize(x, method = 'standardize')
)
lapply(data[, 18],scale(x))
lapply(data[, 18],function(x) normalize(x, method = 'standardize')
)
lapply(data[, 18],function(x) scale(x))
normalize <- function(x) {
    return ((x - min(x)) / (max(x) - min(x)))
}
lapply(data[, 18],function(x) normalize(x))
sapply(data[, 18
data[,18]
names(column)
names(data)
scale(
scale(data[,10])
normalize(data[,10])
names(data)
source("main.r")
source("readData.r.r")
source("readData.r")
summary(data.normalized)
source("readData.r")
summary(data.normalized)
boxplot(data$gameDuration, col = "DuraciÃ³n partida")
boxplot(data$gameDuration, col = "blue")
boxplot(data.normalized$gameDuration, col = "blue")
boxplot(data$gameDuration, col = "blue")
boxplot(data$gameDuration, col = "blue", outline = TRUE)
boxplot(data$gameDuration, col = "blue",)
boxplot(data$gameDuration, col = "blue")
boxplot(data$gameDuration, col = "blue", outline = TRUE)
boxplot(data$gameDuration, col = "blue")
library(ggplot2)
png("boxplotDurationGame.png")
boxplot(data$gameDuration, col = "blue", outline = TRUE)
dev.off()
boxplot(data$gameDuration, col = "blue", outline = FALSE)
boxplot(data[, c(8:18)], outline = FALSE)
boxplot(data[, c(9:18)], outline = FALSE)
boxplot(data[, c(9:18)], outline = TRUE)
png("otherBox.png")
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
png("otherBox.png")
boxplot(data[, c(9:18)], outline = TRUE)
png("otherBox.png")
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
boxplot(data[, c(9:18)], outline = TRUE, width = 12)
dev.off()
boxplot(data[, c(9:18)], outline = TRUE, width = 12)
boxplot(data[, c(9:18)], outline = TRUE, width = 12)
boxplot(data[, c(9:18)], outline = TRUE)
png("otherBox.png", width = 700, height = 480)
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
png("otherBox.png", width = 800, height = 580)
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
png("otherBox.png", width = 900, height = 580)
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
png("otherBox.png", width = 1100, height = 580)
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
png("otherBox.png", width = 1200, height = 580)
boxplot(data[, c(9:18)], outline = TRUE)
dev.off()
source("readData.r")
q()
source("NaiveBayes.r")
source("NaiveBayes.r")
library(e1071)
data <- load("../data/LOLdatanormalized.Rdata")
data
data <- load(file = "../data/LOLdatanormalized.Rdata")
data
source("NaiveBayes.r")
load("../data/LOLdatanormalized.Rdata")
objects()
source("NaiveBayes.r")
model
predict(model, data[.learn])
predict(model, data[-learn])
predict(model, data[-learn], type = "raw")
pred <- predict(model, data[-learn], type = "raw")
pred <- predict(model, data[learn, -1], type = "raw")
head(pred)
tab <- table(pred, data[learn,]$winner)
dim(pred)
dim(data[learn,]$winner)
dim(data[learn]$winner)
dim(data[learn,]$winner)
dim(data[learn,]$Winner)
names(data)
dim(data[learn,]$winner)
data[learn,]$winner
dim(pred)
dim(data[learn,]$winner)
names(data)
predict(model, data[-learn], type = "raw")
is.factor(data[,1])
is.numeric(data[,1])
is.numeric(data[,2])
is.numeric(data[,c(3])
is.numeric(data[,0])
is.numeric(data[,c(0:19)])
is.numeric(data[,c(0:18)])
data$winner <- as.factor(data$winner)
is.factor(data)
is.factor(data$winner)
model <- naiveBayes(winner ~ ., data = data, subset = learn)
predict(model, data, subset = -learn)
pred <- predict(model, data, subset = -learn)
dim(data)
learn
pred <- predict(model, data[-learn,])
dim(pred)
length(pred)
nrow(data) - length(learn)
tab <- table(pred, data[-learn,]$winner)
tab
sum(diag(tab))
sum(diag(tab))/sum(tab)
source("NaiveBayes.r")
pred
source("readData.r")
source("NaiveBayes.r")
error2
error1
error
tab
tab2
source("readData.r")
source("NaiveBayes.r")
error
tab
q()
ls()
ls
ls()
source("readData.r")
ls
ls
cd ..
q()
source("RBF.r")
ls()
modelRandomForest
model <- modelRandomForest
model
save(model, file = "modelRBF.regul")
model$bestTune
source("RBF.r")
ls()
model
model2
model
ls()
model2
ls()
load("../models/modelNB.regul"
)
ls()
model
q()
source("mainRBF.r")
source("mainRBF.r")
source("mainRBF.r")
ls()
tab
tab1
tab2
errorTest
error2
errorLearn
load("plot.r")
source("plot.r")
source("plot.r")
source("mainRBF.r")
ls()
pred
data[-learn]$winner
data[-learn]$winner
data[-learn, ]$winner
data[-learn, ]$winner
pred
data[-learn, ]$winner
data[-learn, ]$winner
pred
source("mainRBF.r")
source("mainRBF.r")
source("mainRBF.r")
ls()
predActual
length(predActual)
length(pred)
length(data[-learn,]$winner]
length(data[-learn,]$winner)
cm <- confusionMatrix(data = data[-learn, ]$winner, reference = pred)
draw_confusion_matrix(cm)
source("mainRBF.r")
source("mainRBF.r")
source("mainRBF.r")
source("mainNB.r")
source("mainNB.r")
source("mainNB.r")
ls()
source("mainMLP.r")
source("mainRDA.r")
source("mainRDA.r")
source("mainRDA.r")
source("mainRDA.r")
source("mainRDA.r")
source("mainRDA.r")
ls()
RDA.tab2 <- table(RDA.predActual, data[learn,]$winner)
RDA.predActual
names(RDA.predActual)
names(RDA.predActual)
source("mainRDA.r")
ls()
RDA.pred$class
data[-learn,]$winner
RDA.pred$class
data[-learn,]$winner
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred)
source("mainMLP.r")
source("mainMLP.r")
MLP.pred
MLP.pred
MLP.pred$class
names(MLP.pred)
MLP.pred
source("mainMLP.r")
MLP.model
pred <- predict(MLP.model, data[-learn,])
pred
source("mainMLP.r")
source("mainMLP.r")
source("mainRDA.r")
ls()
RDA.model
RDA.pred
RDA.pred
source("mainRDA.r")
RDA.pred$class
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred$class)
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred$class)
source("mainRDA.r")
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred$class)
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred$class)
RDA.cm <- confusionMatrix(data = data[-learn, ]$winner, reference = RDA.pred$class)
draw_confusion_matrix(RDA.cm)
source("mainRDA.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainRF.r")
source("mainNB.r")
source("mainRBF.r")
source("main.r")
source("main.r")
source("main.r")
RDA.model <- rda(winner ~ ., data = data, subset = learn, gamma = 0.001, lambda = 1)
RDA.predActual <- as.factor(predict(RDA.model, data[learn,],type='class'))
RDA.predActual <- as.factor(predict(RDA.model, data[learn,],type='class'))
RDA.predActual <- predict(RDA.model, data[learn,])
RDA.tab2 <- table(RDA.predActual$class, data[learn,]$winner)
source("mainRDA")
source("mainRDA.r")
source("main.r")
q()
